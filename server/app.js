const express = require('express')
const app = express()
const path = require('path');
const {MongoClient,ServerApiVersion} = require('mongodb');
const bcrypt = require('bcrypt'); // Used for password hashing
const saltRounds = 10; //any number , we could fix it as 10 for simplicity
const session = require('express-session');
require('dotenv').config({
    path: '../.env'
}); // This points to the .env in the root folder
app.set('case sensitive routing', false);


// setup for .env file for base Url for mongodb


const uri = "mongodb://localhost:27017/";
const key = "6UfZN0VdbW9A9U2ioUtHVRVjmYOPoMTA";

const destinationPages = {
    "Bali": "bali.ejs",
    "Inca": "inca.ejs",
    "Paris": "paris.ejs",
    "Annapurna": "annapurna.ejs",
    "Roma": "roma.ejs",
    "Santorini": "santorini.ejs"
};


console.log('MongoDB URI:', uri);


app.use(session({
    secret: key, // Replace with a secure key
    resave: false, // Prevents session being saved repeatedly
    saveUninitialized: true, // Saves a new session even if it is not modified
    cookie: {
        secure: false
    } // Set to true if using HTTPS
}));


// Create a MongoClient with a MongoClientOptions object to set the Stable API version
const client = new MongoClient(uri, {
    serverApi: {
        version: ServerApiVersion.v1,
        strict: true,
        deprecationErrors: true,
    }
});

// Define the database and collection
const dbName = 'myDB';  //project requirement
const collectionName = 'myCollection';
let db, usersCollection;

// Connect to MongoDB and get the users collection
async function connectDb() {
    await client.connect();
    db = client.db(dbName);
    usersCollection = db.collection(collectionName);
}

//check if the session has a user and redirect if not 
async function checkLogin(){
    if (!req.session.user) {
        return res.redirect('/login'); // Redirect to login if no session user
    }
}


// Setup Express middleware to parse JSON request bodies
app.use(express.json());
app.use(express.urlencoded({
    extended: true
})); // For parsing form data


// Set the 'views' directory
app.set('views', path.join(__dirname, '../views'));

// Serve static files from the 'public' directory
app.use(express.static(path.join(__dirname, '../public')));

// Set the view engine to EJS as required
app.set('view engine', 'ejs');


// each routing path will be done like that it could also be done 
// in a separate routes folder if it overwhelmed us
// req is the request payload and the res is the response generated by the server

// TODO place all get to redirect to the correct locations , insure rest of routes handle ONLY the user who made a login or a registration
app.get(['/', '/login'], (req, res) => {
    res.render('login.ejs');
});

app.get('/registration', (req, res) => {
    res.render('registration.ejs');
});

app.get('/home', async (req, res) => {
    await checkLogin();
    res.render('home.ejs'); // Render home page if session user exists
});

//POST METHODS
// Login Route (POST method to check credentials)
app.post(['/', '/login'], async (req, res) => {
    const { username, password } = req.body;
    let allowLogin = false;

    console.log("Username:", username);
    console.log("Password:", password);

    if (!username || !password) {
        return res.status(400).json({ error: "Username and password are required." });
    }

    if (username === 'admin' && password === 'admin') {
        allowLogin = true;
    }

    try {
        await connectDb();

        if (!allowLogin) {
            // Check if the user exists in the database
            const user = await usersCollection.findOne({ username });
            console.log("User from database:", user);

            if (!user) {
                return res.status(401).json({ error: "User does not exist" });
            }

            // Compare the entered password with the stored hashed password
            const isMatch = await bcrypt.compare(password, user.passwordHash); // Use 'passwordHash'

            if (!isMatch) {
                return res.status(401).json({ error: "Invalid credentials." });
            }

            // Store user information in the session
            req.session.user = { username: user.username };

            return res.status(200).json({ message: "Login successful!" }); // Only one response here
        }

        // If allowLogin is true (admin login)
        req.session.user = { username: 'admin' };

        return res.status(200).json({ message: "Login successful!" }); // Only one response here
    } catch (err) {
        console.error(err);
        return res.status(500).json({ error: "Error logging in." });
    }
});

app.post('/registration', async (req, res) => {
    const { username, password } = req.body;

    if (!username || !password) {
        return res.status(400).json({ error: "Username and password are required." });
    }

    try {
        await connectDb();

        // Check if the username is already taken
        const user = await usersCollection.findOne({ username, type: "user" });
        if (user) {
            return res.status(401).json({ error: "Username is already taken. Please choose another one." });
        }

        // Hash the password
        const hashedPassword = await bcrypt.hash(password, saltRounds);

        // Save the user to the database
        const newUser = {
            type: "user", // Discriminator field
            username,
            passwordHash: hashedPassword, // Correct field name for hashed password
            wantToGoList: [] // Initialize with an empty list
        };

        const result = await usersCollection.insertOne(newUser);

        res.status(201).json({ message: "User registered successfully!" });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: "Error registering user." });
    }
});

app.post('/search', async(req,res)=>{
    const {searchKey} = req.body;
    if (!searchKey )         
        return res.status(400).json({ error: "Search key is required." });
    try{
        await connectDb();

        // searching for destinations
        const destinations = await usersCollection.find({
            type: "destination", // Only search destination documents
            name: { $regex: searchKey, $options: "i" } // Case-insensitive substring search
        }).toArray();

        if (destinations.length === 0){
            return res.status(400).json({ error: "No matching destinations found" });

        }

        res.status(200).json({ destinations });
    }
    catch{
        console.error("Error searching destinations:", err);
        res.status(500).json({ error: "Error searching destinations." });
    }

});


for (let destinationName in destinationPages) {
    app.get(`/${destinationName}`, async (req, res) => {
        await checkLogin();
        try {
            console.log("Requested destination:", destinationName);

            // Connect to the database
            await connectDb();

            // Query the database
            const destination = await usersCollection.findOne({
                type: "destination",
                name: destinationName // Normalize to lowercase
            });

            console.log("Query result:", destination);

            if (!destination) {
                return res.status(404).render('404', { url: req.originalUrl });
            }

            if (!destination.template) {
                console.error("Missing template for destination:", destinationName);
                return res.status(500).send("Template not defined for this destination.");
            }

            // Render the EJS template with dynamic data
            res.render(destination.template, {
                videoUrl: destination.videoUrl,
                description: destination.description,
                image: destination.image,
                name: destination.name
            });
        } catch (err) {
            console.error("Error fetching destination:", err);
            res.status(500).send("Error loading the page.");
        }
    });
}


app.get('/cities', async (req, res) => {
    await checkLogin();
    try {
        await connectDb();

        const type = "City"
        // Fetch destinations of the given type
        const destinations = await usersCollection.find({
            type: "destination",
            destinationType:type  // Match the type, e.g., "islands", "hiking"
        }).toArray();

        if (destinations.length === 0) {
            return res.status(404).send("No destinations found for this type.");
        }

        // Render the EJS template with the fetched data
        res.render('Cities', { destinations, type });
    } catch (err) {
        console.error("Error fetching destinations:", err);
        res.status(500).send("Error loading destinations.");
    }
});




app.get('/islands', async (req, res) => {
    await checkLogin();
    try {
        await connectDb();

        const type = "Island"
        // Fetch destinations of the given type
        const destinations = await usersCollection.find({
            type: "destination",
            destinationType:type  // Match the type, e.g., "islands", "hiking"
        }).toArray();

        if (destinations.length === 0) {
            return res.status(404).send("No destinations found for this type.");
        }

        // Render the EJS template with the fetched data
        res.render('Islands', { destinations, type });
    } catch (err) {
        console.error("Error fetching destinations:", err);
        res.status(500).send("Error loading destinations.");
    }
});


app.get('/hiking', async (req, res) => {
    await checkLogin();
    try {
        await connectDb();

        const type = "Hiking"
        // Fetch destinations of the given type
        const destinations = await usersCollection.find({
            type: "destination",
            destinationType:type  // Match the type, e.g., "islands", "hiking"
        }).toArray();

        if (destinations.length === 0) {
            return res.status(404).send("No destinations found for this type.");
        }

        // Render the EJS template with the fetched data
        res.render('Hiking', { destinations, type });
    } catch (err) {
        console.error("Error fetching destinations:", err);
        res.status(500).send("Error loading destinations.");
    }
});

app.listen(3000, () => {
    console.log('Server started on port 3000');
});


//database data:
/* 
[
  {
    "type": "destination",
    "name": "Santorini",
    "template": "santorini.ejs",
    "description": "A Greek island famous for its whitewashed buildings, blue domes, and stunning sunsets.",
    "image": "/santorini.png",
    "videoUrl": "https://www.youtube.com/embed/4zAEDLwl9HI",
    "destinationType": "Island"
  },
  {
    "type": "destination",
    "name": "Roma",
    "template": "roma.ejs",
    "description": "The Eternal City, known for its ancient ruins like the Colosseum and rich cultural heritage.",
    "image": "/roma.png",
    "videoUrl": "https://www.youtube.com/embed/hNaQ8jq_3zM",
    "destinationType": "City"
  },
  {
    "type": "destination",
    "name": "Annapurna",
    "template": "annapurna.ejs",
    "description": "A breathtaking Himalayan mountain range, offering some of the world's most iconic trekking routes.",
    "image": "/annapurna.png",
    "videoUrl": "https://www.youtube.com/embed/qBgkuiqPK0I",
    "destinationType": "Hiking"
  },
  {
    "type": "destination",
    "name": "Paris",
    "template": "paris.ejs",
    "description": "The city of lights, famous for its art, architecture, and iconic landmarks like the Eiffel Tower.",
    "image": "/paris.png",
    "videoUrl": "https://www.youtube.com/embed/wroGPb4-3yM",
    "destinationType": "City"
  },
  {
    "type": "destination",
    "name": "Inca",
    "template": "inca.ejs",
    "description": "Home to Machu Picchu, the ancient city of the Inca Empire located in the Andes mountains.",
    "image": "/inca.png",
    "videoUrl": "https://www.youtube.com/embed/oZ90M55mDac",
    "destinationType": "Hiking"
  },
  {
    "type": "destination",
    "name": "Bali",
    "template": "bali.ejs",
    "description": "A tropical paradise known for its lush greenery, serene beaches, and vibrant culture.",
    "image": "/bali.png",
    "videoUrl": "https://www.youtube.com/embed/tZIRwYeEGnc",
    "destinationType": "Island"
  }
]


*/


app.get('*', (req, res) => {            
    res.status(404).render('404', { url: req.originalUrl });
});